/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    field int maxLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let str = Array.new(maxLength);
        let length = 0;
        let maxLength = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < maxLength) {
            let str[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i, digit;
        var boolean isNegative;
        
        let val = 0;
        let i = 0;
        let isNegative = false;
        
        // Check for negative sign
        if ((length > 0) & (str[0] = 45)) {
            let isNegative = true;
            let i = 1;
        }
        
        while ((i < length) & String.isDigit(str[i])) {
            let digit = str[i] - 48; // Convert char to digit
            let val = (val * 10) + digit;
            let i = i + 1;
        }
        
        if (isNegative) {
            return -val;
        } else {
            return val;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0; // Clear the string
        
        if (val < 0) {
            let val = -val;
            do appendChar(45); // Append '-'
        }
        
        do setIntHelper(val);
        return;
    }
    
    /** Helper method for setInt */
    method void setIntHelper(int val) {
        var int lastDigit, c;
        
        let lastDigit = val - ((val / 10) * 10); // val % 10
        let c = lastDigit + 48; // Convert digit to char
        
        if (val < 10) {
            do appendChar(c);
        } else {
            do setIntHelper(val / 10);
            do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
    
    /** Returns true if c is a digit character (0-9) */
    function boolean isDigit(char c) {
        return (c > 47) & (c < 58);
    }
}