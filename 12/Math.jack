/**
 * A library of commonly used mathematical functions.
 * Note: Jack language supports only integer arithmetic.
 */
class Math {
    static Array twoToThe; // Array to store powers of 2

    /** Initializes the library. */
    function void init() {
        var int i, power;
        let twoToThe = Array.new(16);
        let power = 1;
        let i = 0;
        while (i < 16) {
            let twoToThe[i] = power;
            let power = power + power; // Multiply by 2
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        let sum = 0;
        let shiftedX = Math.abs(x);
        let i = 0;
        
        while (i < 16) {
            if (Math.bit(Math.abs(y), i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX; // Shift left by 1
            let i = i + 1;
        }
        
        if (((x < 0) & (y > 0)) | ((x > 0) & (y < 0))) {
            return -sum;
        } else {
            return sum;
        }
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int result;
        var boolean isNegative;
        var int absX, absY;
        
        let isNegative = ((x < 0) & (y > 0)) | ((x > 0) & (y < 0));
        let absX = Math.abs(x);
        let absY = Math.abs(y);
        
        let result = Math.divideHelper(absX, absY);
        
        if (isNegative) {
            return -result;
        } else {
            return result;
        }
    }
    
    /** Helper function for division using recursion. */
    function int divideHelper(int x, int y) {
        var int q;
        
        if (y > x) {
            return 0;
        }
        
        let q = Math.divideHelper(x, y + y);
        
        if ((x - (2 * q * y)) < y) {
            return 2 * q;
        } else {
            return (2 * q) + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, temp, tempSquared;
        let y = 0;
        let j = 7; // (16/2) - 1
        
        while (j > -1) {
            let temp = y + twoToThe[j];
            let tempSquared = temp * temp;
            
            if ((tempSquared > 0) & ((tempSquared < x) | (tempSquared = x))) {
                let y = temp;
            }
            let j = j - 1;
        }
        
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }
    
    /** Returns true if the i-th bit of x is 1, false otherwise. */
    function boolean bit(int x, int i) {
        return ~((x & twoToThe[i]) = 0);
    }
}