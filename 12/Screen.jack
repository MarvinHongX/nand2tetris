/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        var int i, power;
        let color = true;
        let twoToThe = Array.new(16);
        let power = 1;
        let i = 0;
        while (i < 16) {
            let twoToThe[i] = power;
            let power = power + power;
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 16384;
        while (i < 24576) {
            do Memory.poke(i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, bit;
        
        let address = (32 * y) + (x / 16);
        let value = Memory.peek(16384 + address);
        let bit = x & 15; // x % 16
        
        if (color) {
            let value = value | twoToThe[bit];
        } else {
            let value = value & (~twoToThe[bit]);
        }
        
        do Memory.poke(16384 + address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff, temp;
        
        // Handle special cases
        if (x1 = x2) {
            do Screen.drawVerticalLine(x1, Math.min(y1, y2), Math.max(y1, y2));
            return;
        }
        
        if (y1 = y2) {
            do Screen.drawHorizontalLine(Math.min(x1, x2), Math.max(x1, x2), y1);
            return;
        }
        
        // Ensure we draw from left to right
        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let diff = 0;
        
        if (dy > 0) {
            // Line goes down
            while ((a < dx) | (a = dx)) & ((b < dy) | (b = dy)) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        } else {
            // Line goes up
            let dy = -dy;
            while ((a < dx) | (a = dx)) & ((b < dy) | (b = dy)) {
                do Screen.drawPixel(x1 + a, y1 - b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        }
        return;
    }
    
    /** Draws a vertical line */
    function void drawVerticalLine(int x, int y1, int y2) {
        var int y;
        let y = y1;
        while ((y < y2) | (y = y2)) {
            do Screen.drawPixel(x, y);
            let y = y + 1;
        }
        return;
    }
    
    /** Draws a horizontal line */
    function void drawHorizontalLine(int x1, int x2, int y) {
        var int x;
        let x = x1;
        while ((x < x2) | (x = x2)) {
            do Screen.drawPixel(x, y);
            let x = x + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        let y = y1;
        while ((y < y2) | (y = y2)) {
            do Screen.drawHorizontalLine(x1, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dx;
        let dy = -r;
        while ((dy < r) | (dy = r)) {
            let dx = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawHorizontalLine(x - dx, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}